{
    "sourceFile": "maskrcnn_benchmark/config/paths_catalog.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1674833317335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1674834654980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n             \"epfl2vnc/target_images\",\n             \"epfl2vnc/annotations/vnc_instance_annotations.json\",\n         ),\n         \"consep2tnbc_train\": (\n-            \"\"\n+            \"consep2tnbc/source_images\"\n         )\n \n \n     }\n"
                },
                {
                    "date": 1674834672824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,10 @@\n             \"epfl2vnc/target_images\",\n             \"epfl2vnc/annotations/vnc_instance_annotations.json\",\n         ),\n         \"consep2tnbc_train\": (\n-            \"consep2tnbc/source_images\"\n+            \"consep2tnbc/source_images\",\n+            \"consep2tnbc/annotations/\"\n         )\n \n \n     }\n"
                },
                {
                    "date": 1674834694342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n             \"epfl2vnc/annotations/vnc_instance_annotations.json\",\n         ),\n         \"consep2tnbc_train\": (\n             \"consep2tnbc/source_images\",\n-            \"consep2tnbc/annotations/\"\n+            \"consep2tnbc/annotations/consep_instance_train.json\"\n         )\n \n \n     }\n"
                },
                {
                    "date": 1674834769457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n         \"consep2tnbc_train\": (\n             \"consep2tnbc/source_images\",\n             \"consep2tnbc/annotations/consep_instance_train.json\"\n         )\n-        \"tnbc_train\"\n+        \"tnbc_train\": \n \n \n     }\n \n"
                },
                {
                    "date": 1674834926080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,9 +179,9 @@\n             \"consep2tnbc/annotations/consep_instance_train.json\"\n         ),\n         \"tnbc_train\": (\n             \"consep2tnbc/target_images\"\n-        )\n+        ),\n \n \n     }\n \n"
                }
            ],
            "date": 1674833317335,
            "name": "Commit-0",
            "content": "# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n\"\"\"Centralized catalog of paths.\"\"\"\n\nimport os\nfrom copy import deepcopy\n\n\nclass DatasetCatalog(object):\n    DATA_DIR = \"datasets\"\n    DATASETS = {\n        \"coco_2017_train\": {\n            \"img_dir\": \"coco/train2017\",\n            \"ann_file\": \"coco/annotations/instances_train2017.json\"\n        },\n        \"coco_2017_val\": {\n            \"img_dir\": \"coco/val2017\",\n            \"ann_file\": \"coco/annotations/instances_val2017.json\"\n        },\n        \"coco_2014_train\": {\n            \"img_dir\": \"coco/train2014\",\n            \"ann_file\": \"coco/annotations/instances_train2014.json\"\n        },\n        \"coco_2014_val\": {\n            \"img_dir\": \"coco/val2014\",\n            \"ann_file\": \"coco/annotations/instances_val2014.json\"\n        },\n        \"coco_2014_minival\": {\n            \"img_dir\": \"coco/val2014\",\n            \"ann_file\": \"coco/annotations/instances_minival2014.json\"\n        },\n        \"coco_2014_valminusminival\": {\n            \"img_dir\": \"coco/val2014\",\n            \"ann_file\": \"coco/annotations/instances_valminusminival2014.json\"\n        },\n        \"keypoints_coco_2014_train\": {\n            \"img_dir\": \"coco/train2014\",\n            \"ann_file\": \"coco/annotations/person_keypoints_train2014.json\",\n        },\n        \"keypoints_coco_2014_val\": {\n            \"img_dir\": \"coco/val2014\",\n            \"ann_file\": \"coco/annotations/person_keypoints_val2014.json\"\n        },\n        \"keypoints_coco_2014_minival\": {\n            \"img_dir\": \"coco/val2014\",\n            \"ann_file\": \"coco/annotations/person_keypoints_minival2014.json\",\n        },\n        \"keypoints_coco_2014_valminusminival\": {\n            \"img_dir\": \"coco/val2014\",\n            \"ann_file\": \"coco/annotations/person_keypoints_valminusminival2014.json\",\n        },\n        \"voc_2007_train\": {\n            \"data_dir\": \"voc/VOC2007\",\n            \"split\": \"train\"\n        },\n        \"voc_2007_train_cocostyle\": {\n            \"img_dir\": \"voc/VOC2007/JPEGImages\",\n            \"ann_file\": \"voc/VOC2007/Annotations/pascal_train2007.json\"\n        },\n        \"voc_2007_val\": {\n            \"data_dir\": \"voc/VOC2007\",\n            \"split\": \"val\"\n        },\n        \"voc_2007_val_cocostyle\": {\n            \"img_dir\": \"voc/VOC2007/JPEGImages\",\n            \"ann_file\": \"voc/VOC2007/Annotations/pascal_val2007.json\"\n        },\n        \"voc_2007_test\": {\n            \"data_dir\": \"voc/VOC2007\",\n            \"split\": \"test\"\n        },\n        \"voc_2007_test_cocostyle\": {\n            \"img_dir\": \"voc/VOC2007/JPEGImages\",\n            \"ann_file\": \"voc/VOC2007/Annotations/pascal_test2007.json\"\n        },\n        \"voc_2012_train\": {\n            \"data_dir\": \"voc/VOC2012\",\n            \"split\": \"train\"\n        },\n        \"voc_2012_train_cocostyle\": {\n            \"img_dir\": \"voc/VOC2012/JPEGImages\",\n            \"ann_file\": \"voc/VOC2012/Annotations/pascal_train2012.json\"\n        },\n        \"voc_2012_val\": {\n            \"data_dir\": \"voc/VOC2012\",\n            \"split\": \"val\"\n        },\n        \"voc_2012_val_cocostyle\": {\n            \"img_dir\": \"voc/VOC2012/JPEGImages\",\n            \"ann_file\": \"voc/VOC2012/Annotations/pascal_val2012.json\"\n        },\n        \"voc_2012_test\": {\n            \"data_dir\": \"voc/VOC2012\",\n            \"split\": \"test\"\n            # PASCAL VOC2012 doesn't made the test annotations available, so there's no json annotation\n        },\n\n        ##############################################\n        # These ones are deprecated, should be removed\n        \"cityscapes_fine_instanceonly_seg_train_cocostyle\": {\n            \"img_dir\": \"cityscapes/images\",\n            \"ann_file\": \"cityscapes/annotations/instancesonly_filtered_gtFine_train.json\"\n        },\n        \"cityscapes_fine_instanceonly_seg_val_cocostyle\": {\n            \"img_dir\": \"cityscapes/images\",\n            \"ann_file\": \"cityscapes/annotations/instancesonly_filtered_gtFine_val.json\"\n        },\n        \"cityscapes_fine_instanceonly_seg_test_cocostyle\": {\n            \"img_dir\": \"cityscapes/images\",\n            \"ann_file\": \"cityscapes/annotations/instancesonly_filtered_gtFine_test.json\"\n        },\n        ##############################################\n\n        \"cityscapes_poly_instance_train\": {\n            \"img_dir\": \"cityscapes/leftImg8bit/\",\n            \"ann_dir\": \"cityscapes/gtFine/\",\n            \"split\": \"train\",\n            \"mode\": \"poly\",\n        },\n        \"cityscapes_poly_instance_val\": {\n            \"img_dir\": \"cityscapes/leftImg8bit\",\n            \"ann_dir\": \"cityscapes/gtFine\",\n            \"split\": \"val\",\n            \"mode\": \"poly\",\n        },\n        \"cityscapes_poly_instance_minival\": {\n            \"img_dir\": \"cityscapes/leftImg8bit\",\n            \"ann_dir\": \"cityscapes/gtFine\",\n            \"split\": \"val\",\n            \"mode\": \"poly\",\n            \"mini\": 10,\n        },\n        \"cityscapes_mask_instance_train\": {\n            \"img_dir\": \"cityscapes/leftImg8bit/\",\n            \"ann_dir\": \"cityscapes/gtFine/\",\n            \"split\": \"train\",\n            \"mode\": \"mask\",\n        },\n        \"cityscapes_mask_instance_val\": {\n            \"img_dir\": \"cityscapes/leftImg8bit\",\n            \"ann_dir\": \"cityscapes/gtFine\",\n            \"split\": \"val\",\n            \"mode\": \"mask\",\n        },\n        \"cityscapes_mask_instance_minival\": {\n            \"img_dir\": \"cityscapes/leftImg8bit\",\n            \"ann_dir\": \"cityscapes/gtFine\",\n            \"split\": \"val\",\n            \"mode\": \"mask\",\n            \"mini\": 10,\n        },\n        \"cell_fluo2tcga_syn_train\": (\n            \"fluo2tcga/source_images\",\n            \"fluo2tcga/annotations/fluo2tcga_instance_annotations.json\",\n        ),\n        \"cell_tcga\": (\n            \"fluo2tcga/target_images\",\n            \"fluo2tcga/annotations/tcga_instance_annotations.json\",\n        ),\n\n        \"cell_fluo2tnbc_syn_train\": (\n            \"fluo2tnbc/source_images\",\n            \"fluo2tnbc/annotations/fluo2tnbc_instance_annotations.json\",\n        ),\n        \"celltnbc_tgt_train40\": (\n            \"fluo2tnbc/target_images\",\n            \"fluo2tnbc/annotations/tnbc_instance_annotations.json\",\n        ),\n\n        \"em_epfl2vnc_syn_train\": (\n            \"epfl2vnc/source_images\",\n            \"epfl2vnc/annotations/epfl2vnc_instance_annotations.json\",\n        ),\n        \"em_vnc_raw_train\": (\n            \"epfl2vnc/target_images\",\n            \"epfl2vnc/annotations/vnc_instance_annotations.json\",\n        ),\n        \"consep2tnbc_train\": (\n            \"\"\n        )\n\n\n    }\n\n    @staticmethod\n    def get(name):\n        if \"coco\" in name:\n            data_dir = DatasetCatalog.DATA_DIR\n            attrs = DatasetCatalog.DATASETS[name]\n            args = dict(\n                root=os.path.join(data_dir, attrs[\"img_dir\"]),\n                ann_file=os.path.join(data_dir, attrs[\"ann_file\"]),\n            )\n            return dict(\n                factory=\"COCODataset\",\n                args=args,\n            )\n        elif \"voc\" in name:\n            data_dir = DatasetCatalog.DATA_DIR\n            attrs = DatasetCatalog.DATASETS[name]\n            args = dict(\n                data_dir=os.path.join(data_dir, attrs[\"data_dir\"]),\n                split=attrs[\"split\"],\n            )\n            return dict(\n                factory=\"PascalVOCDataset\",\n                args=args,\n            )\n        elif \"cityscapes\" in name:\n            data_dir = DatasetCatalog.DATA_DIR\n            attrs = deepcopy(DatasetCatalog.DATASETS[name])\n            attrs[\"img_dir\"] = os.path.join(data_dir, attrs[\"img_dir\"])\n            attrs[\"ann_dir\"] = os.path.join(data_dir, attrs[\"ann_dir\"])\n            return dict(factory=\"CityScapesDataset\", args=attrs)\n\n        elif \"cell\" in name:\n            data_dir = DatasetCatalog.DATA_DIR\n            attrs = DatasetCatalog.DATASETS[name]\n            args = dict(\n                root=os.path.join(data_dir, attrs[0]),\n                ann_file=os.path.join(data_dir, attrs[1]),\n\n            )\n            return dict(\n                factory=\"COCODataset\",\n                args=args,\n            )\n\n        elif \"em\" in name:\n            data_dir = DatasetCatalog.DATA_DIR\n            attrs = DatasetCatalog.DATASETS[name]\n            args = dict(\n                root=os.path.join(data_dir, attrs[0]),\n                ann_file=os.path.join(data_dir, attrs[1]),\n                #    sem_root = os.path.join(data_dir, attrs[2]),\n\n            )\n\n            return dict(\n                factory=\"COCODataset\",\n                args=args,\n            )\n        raise RuntimeError(\"Dataset not available: {}\".format(name))\n\n\nclass ModelCatalog(object):\n    S3_C2_DETECTRON_URL = \"https://dl.fbaipublicfiles.com/detectron\"\n    C2_IMAGENET_MODELS = {\n        \"MSRA/R-50\": \"ImageNetPretrained/MSRA/R-50.pkl\",\n        \"MSRA/R-50-GN\": \"ImageNetPretrained/47261647/R-50-GN.pkl\",\n        \"MSRA/R-101\": \"ImageNetPretrained/MSRA/R-101.pkl\",\n        \"MSRA/R-101-GN\": \"ImageNetPretrained/47592356/R-101-GN.pkl\",\n        \"FAIR/20171220/X-101-32x8d\": \"ImageNetPretrained/20171220/X-101-32x8d.pkl\",\n    }\n\n    C2_DETECTRON_SUFFIX = \"output/train/{}coco_2014_train%3A{}coco_2014_valminusminival/generalized_rcnn/model_final.pkl\"\n    C2_DETECTRON_MODELS = {\n        \"35857197/e2e_faster_rcnn_R-50-C4_1x\": \"01_33_49.iAX0mXvW\",\n        \"35857345/e2e_faster_rcnn_R-50-FPN_1x\": \"01_36_30.cUF7QR7I\",\n        \"35857890/e2e_faster_rcnn_R-101-FPN_1x\": \"01_38_50.sNxI7sX7\",\n        \"36761737/e2e_faster_rcnn_X-101-32x8d-FPN_1x\": \"06_31_39.5MIHi1fZ\",\n        \"35858791/e2e_mask_rcnn_R-50-C4_1x\": \"01_45_57.ZgkA7hPB\",\n        \"35858933/e2e_mask_rcnn_R-50-FPN_1x\": \"01_48_14.DzEQe4wC\",\n        \"35861795/e2e_mask_rcnn_R-101-FPN_1x\": \"02_31_37.KqyEK4tT\",\n        \"36761843/e2e_mask_rcnn_X-101-32x8d-FPN_1x\": \"06_35_59.RZotkLKI\",\n        \"37129812/e2e_mask_rcnn_X-152-32x8d-FPN-IN5k_1.44x\": \"09_35_36.8pzTQKYK\",\n        # keypoints\n        \"37697547/e2e_keypoint_rcnn_R-50-FPN_1x\": \"08_42_54.kdzV35ao\"\n    }\n\n    @staticmethod\n    def get(name):\n        if name.startswith(\"Caffe2Detectron/COCO\"):\n            return ModelCatalog.get_c2_detectron_12_2017_baselines(name)\n        if name.startswith(\"ImageNetPretrained\"):\n            return ModelCatalog.get_c2_imagenet_pretrained(name)\n        raise RuntimeError(\"model not present in the catalog {}\".format(name))\n\n    @staticmethod\n    def get_c2_imagenet_pretrained(name):\n        prefix = ModelCatalog.S3_C2_DETECTRON_URL\n        name = name[len(\"ImageNetPretrained/\"):]\n        name = ModelCatalog.C2_IMAGENET_MODELS[name]\n        url = \"/\".join([prefix, name])\n        return url\n\n    @staticmethod\n    def get_c2_detectron_12_2017_baselines(name):\n        # Detectron C2 models are stored following the structure\n        # prefix/<model_id>/2012_2017_baselines/<model_name>.yaml.<signature>/suffix\n        # we use as identifiers in the catalog Caffe2Detectron/COCO/<model_id>/<model_name>\n        prefix = ModelCatalog.S3_C2_DETECTRON_URL\n        dataset_tag = \"keypoints_\" if \"keypoint\" in name else \"\"\n        suffix = ModelCatalog.C2_DETECTRON_SUFFIX.format(\n            dataset_tag, dataset_tag)\n        # remove identification prefix\n        name = name[len(\"Caffe2Detectron/COCO/\"):]\n        # split in <model_id> and <model_name>\n        model_id, model_name = name.split(\"/\")\n        # parsing to make it match the url address from the Caffe2 models\n        model_name = \"{}.yaml\".format(model_name)\n        signature = ModelCatalog.C2_DETECTRON_MODELS[name]\n        unique_name = \".\".join([model_name, signature])\n        url = \"/\".join([prefix, model_id, \"12_2017_baselines\",\n                       unique_name, suffix])\n        return url\n"
        }
    ]
}