{
    "sourceFile": "dataprocess/shape2coco.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1674820316708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1674820502942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import re\n import fnmatch\n from PIL import Image\n import numpy as np\n-from pycococreatortools import pycococreatortools\n+import pycococreatortools\n \n ROOT_DIR = 'train'\n IMAGE_DIR = os.path.join(ROOT_DIR, \"shapes_train2018\")\n ANNOTATION_DIR = os.path.join(ROOT_DIR, \"annotations\")\n"
                }
            ],
            "date": 1674820316708,
            "name": "Commit-0",
            "content": "#!/usr/bin/env python3\n\nimport datetime\nimport json\nimport os\nimport re\nimport fnmatch\nfrom PIL import Image\nimport numpy as np\nfrom pycococreatortools import pycococreatortools\n\nROOT_DIR = 'train'\nIMAGE_DIR = os.path.join(ROOT_DIR, \"shapes_train2018\")\nANNOTATION_DIR = os.path.join(ROOT_DIR, \"annotations\")\n\nINFO = {\n    \"description\": \"Example Dataset\",\n    \"url\": \"https://github.com/waspinator/pycococreator\",\n    \"version\": \"0.1.0\",\n    \"year\": 2018,\n    \"contributor\": \"waspinator\",\n    \"date_created\": datetime.datetime.utcnow().isoformat(' ')\n}\n\nLICENSES = [\n    {\n        \"id\": 1,\n        \"name\": \"Attribution-NonCommercial-ShareAlike License\",\n        \"url\": \"http://creativecommons.org/licenses/by-nc-sa/2.0/\"\n    }\n]\n\nCATEGORIES = [\n    {\n        'id': 1,\n        'name': 'square',\n        'supercategory': 'shape',\n    },\n    {\n        'id': 2,\n        'name': 'circle',\n        'supercategory': 'shape',\n    },\n    {\n        'id': 3,\n        'name': 'triangle',\n        'supercategory': 'shape',\n    },\n]\n\ndef filter_for_jpeg(root, files):\n    file_types = ['*.jpeg', '*.jpg']\n    file_types = r'|'.join([fnmatch.translate(x) for x in file_types])\n    files = [os.path.join(root, f) for f in files]\n    files = [f for f in files if re.match(file_types, f)]\n    \n    return files\n\ndef filter_for_annotations(root, files, image_filename):\n    file_types = ['*.png']\n    file_types = r'|'.join([fnmatch.translate(x) for x in file_types])\n    basename_no_extension = os.path.splitext(os.path.basename(image_filename))[0]\n    file_name_prefix = basename_no_extension + '.*'\n    files = [os.path.join(root, f) for f in files]\n    files = [f for f in files if re.match(file_types, f)]\n    files = [f for f in files if re.match(file_name_prefix, os.path.splitext(os.path.basename(f))[0])]\n\n    return files\n\ndef main():\n\n    coco_output = {\n        \"info\": INFO,\n        \"licenses\": LICENSES,\n        \"categories\": CATEGORIES,\n        \"images\": [],\n        \"annotations\": []\n    }\n\n    image_id = 1\n    segmentation_id = 1\n    \n    # filter for jpeg images\n    for root, _, files in os.walk(IMAGE_DIR):\n        image_files = filter_for_jpeg(root, files)\n\n        # go through each image\n        for image_filename in image_files:\n            image = Image.open(image_filename)\n            image_info = pycococreatortools.create_image_info(\n                image_id, os.path.basename(image_filename), image.size)\n            coco_output[\"images\"].append(image_info)\n\n            # filter for associated png annotations\n            for root, _, files in os.walk(ANNOTATION_DIR):\n                annotation_files = filter_for_annotations(root, files, image_filename)\n\n                # go through each associated annotation\n                for annotation_filename in annotation_files:\n                    \n                    print(annotation_filename)\n                    class_id = [x['id'] for x in CATEGORIES if x['name'] in annotation_filename][0]\n\n                    category_info = {'id': class_id, 'is_crowd': 'crowd' in image_filename}\n                    binary_mask = np.asarray(Image.open(annotation_filename)\n                        .convert('1')).astype(np.uint8)\n                    \n                    annotation_info = pycococreatortools.create_annotation_info(\n                        segmentation_id, image_id, category_info, binary_mask,\n                        image.size, tolerance=2)\n\n                    if annotation_info is not None:\n                        coco_output[\"annotations\"].append(annotation_info)\n\n                    segmentation_id = segmentation_id + 1\n\n            image_id = image_id + 1\n\n    with open('{}/instances_shape_train2018.json'.format(ROOT_DIR), 'w') as output_json_file:\n        json.dump(coco_output, output_json_file)\n\n\nif __name__ == \"__main__\":\n    main()"
        }
    ]
}