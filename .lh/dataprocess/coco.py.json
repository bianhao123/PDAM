{
    "sourceFile": "dataprocess/coco.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1674818160278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1674818160278,
            "name": "Commit-0",
            "content": "from PIL import Image                                      # (pip install Pillow)\nimport numpy as np                                         # (pip install numpy)\nfrom skimage import measure                                # (pip install scikit-image)\nfrom shapely.geometry import Polygon, MultiPolygon         # (pip install Shapely)\nimport os\nimport json\n\ndef create_sub_masks(mask_image, width, height):\n    # Initialize a dictionary of sub-masks indexed by RGB colors\n    sub_masks = {}\n    for x in range(width):\n        for y in range(height):\n            # Get the RGB values of the pixel\n            pixel = mask_image.getpixel((x,y))[:3]\n\n            # Check to see if we have created a sub-mask...\n            pixel_str = str(pixel)\n            sub_mask = sub_masks.get(pixel_str)\n            if sub_mask is None:\n               # Create a sub-mask (one bit per pixel) and add to the dictionary\n                # Note: we add 1 pixel of padding in each direction\n                # because the contours module doesn\"t handle cases\n                # where pixels bleed to the edge of the image\n                sub_masks[pixel_str] = Image.new(\"1\", (width+2, height+2))\n\n            # Set the pixel value to 1 (default is 0), accounting for padding\n            sub_masks[pixel_str].putpixel((x+1, y+1), 1)\n\n    return sub_masks\n\ndef create_sub_mask_annotation(sub_mask):\n    # Find contours (boundary lines) around each sub-mask\n    # Note: there could be multiple contours if the object\n    # is partially occluded. (E.g. an elephant behind a tree)\n    contours = measure.find_contours(np.array(sub_mask), 0.5, positive_orientation=\"low\")\n\n    polygons = []\n    segmentations = []\n    for contour in contours:\n        # Flip from (row, col) representation to (x, y)\n        # and subtract the padding pixel\n        for i in range(len(contour)):\n            row, col = contour[i]\n            contour[i] = (col - 1, row - 1)\n\n        # Make a polygon and simplify it\n        poly = Polygon(contour)\n        poly = poly.simplify(1.0, preserve_topology=False)\n        \n        if(poly.is_empty):\n            # Go to next iteration, dont save empty values in list\n            continue\n\n        polygons.append(poly)\n\n        segmentation = np.array(poly.exterior.coords).ravel().tolist()\n        segmentations.append(segmentation)\n    \n    return polygons, segmentations\n\ndef create_category_annotation(category_dict):\n    category_list = []\n\n    for key, value in category_dict.items():\n        category = {\n            \"supercategory\": key,\n            \"id\": value,\n            \"name\": key\n        }\n        category_list.append(category)\n\n    return category_list\n\ndef create_image_annotation(file_name, width, height, image_id):\n    images = {\n        \"file_name\": file_name,\n        \"height\": height,\n        \"width\": width,\n        \"id\": image_id\n    }\n\n    return images\n\ndef create_annotation_format(polygon, segmentation, image_id, category_id, annotation_id):\n    min_x, min_y, max_x, max_y = polygon.bounds\n    width = max_x - min_x\n    height = max_y - min_y\n    bbox = (min_x, min_y, width, height)\n    area = polygon.area\n\n    annotation = {\n        \"segmentation\": segmentation,\n        \"area\": area,\n        \"iscrowd\": 0,\n        \"image_id\": image_id,\n        \"bbox\": bbox,\n        \"category_id\": category_id,\n        \"id\": annotation_id\n    }\n\n    return annotation\n\ndef get_coco_json_format():\n    # Standard COCO format \n    coco_format = {\n        \"info\": {},\n        \"licenses\": [],\n        \"images\": [{}],\n        \"categories\": [{}],\n        \"annotations\": [{}]\n    }\n\n    return coco_format"
        }
    ]
}