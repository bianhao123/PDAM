{
    "sourceFile": "inference/pannuke2tnbc_infer.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1674907413007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1674907415629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,10 @@\n import numpy as np\n from maskrcnn_benchmark.modeling.detector import build_detection_model\n \n \n-\n def infer_fluo2tnbc(wts_root, out_pred_root):\n \n-\n     config_file = \"../configs/uda_nuclei_seg/e2e_mask_rcnn_R_101_FPN_1x_gn_pannuke2tnbc.yaml\"\n \n     cfg.merge_from_file(config_file)\n \n@@ -24,9 +22,9 @@\n     cell_demo = CellDemo(\n         cfg,\n         min_image_size=512,\n         confidence_threshold=0.5,\n-        weight= wts_root,\n+        weight=wts_root,\n         model=model\n     )\n \n     test_root_name = ''  # with testing images\n@@ -43,18 +41,18 @@\n             predictions, mask_list = cell_demo.run_on_opencv_image(image)\n             masks_no_overlap, bi_map, num_mask = removeoverlap(mask_list)\n             pred_ins = mask2out(masks_no_overlap, num_mask)\n \n-\n             cv2.imwrite(os.path.join(out_pred_root, img_name), predictions)\n-            cv2.imwrite(os.path.join(out_pred_root, 'bi_mask_' + img_name), (bi_map*255).astype(np.uint8))\n+            cv2.imwrite(os.path.join(out_pred_root, 'bi_mask_' +\n+                        img_name), (bi_map * 255).astype(np.uint8))\n \n-            pred_ins_name = os.path.join(out_pred_root, img_name.split('.')[0] + '.tif')\n+            pred_ins_name = os.path.join(\n+                out_pred_root, img_name.split('.')[0] + '.tif')\n             tiff.imsave(pred_ins_name, pred_ins)\n \n \n-\n if __name__ == \"__main__\":\n\\ No newline at end of file\n     wts_root = ''\n     out_pred_root = ''\n \n-    infer_fluo2tnbc(wts_root, out_pred_root)\n+    infer_fluo2tnbc(wts_root, out_pred_root)\n"
                },
                {
                    "date": 1674907457180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \n-import cv2.cv2 as cv2\n+import cv2\n from maskrcnn_benchmark.utils.miscellaneous import mkdir\n import tifffile as tiff\n from inference.cell_predictor import CellDemo\n from inference.metrics import mask2out, removeoverlap\n@@ -54,5 +54,5 @@\n if __name__ == \"__main__\":\n     wts_root = ''\n     out_pred_root = ''\n \n-    infer_fluo2tnbc(wts_root, out_pred_root)\n\\ No newline at end of file\n+    infer_fluo2tnbc(wts_root, out_pred_root)\n"
                },
                {
                    "date": 1674907474965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,7 +52,7 @@\n \n \n if __name__ == \"__main__\":\n     wts_root = ''\n-    out_pred_root = ''\n+    out_pred_root = 'OUTPUT'\n \n     infer_fluo2tnbc(wts_root, out_pred_root)\n"
                },
                {
                    "date": 1674907507200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,8 @@\n             tiff.imsave(pred_ins_name, pred_ins)\n \n \n if __name__ == \"__main__\":\n-    wts_root = ''\n+    wts_root = '/data111/bianhao/code/zhangye/PDAM/work_dir/pannuke2tnbc-models/pdam/model_epoch_010.pth'\n     out_pred_root = 'OUTPUT'\n \n     infer_fluo2tnbc(wts_root, out_pred_root)\n"
                },
                {
                    "date": 1674907559140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,10 @@\n         weight=wts_root,\n         model=model\n     )\n \n-    test_root_name = ''  # with testing images\n+    # with testing images\n+    test_root_name = '/data111/bianhao/code/zhangye/PDAM/ZY_CVPR/tnbc/coco/test/source_images'\n \n     mkdir(out_pred_root)\n \n     test_imgs = os.listdir(test_root_name)\n"
                },
                {
                    "date": 1674907713152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     model = build_detection_model(cfg)\n \n     cell_demo = CellDemo(\n         cfg,\n-        min_image_size=512,\n+        min_image_size=256,\n         confidence_threshold=0.5,\n         weight=wts_root,\n         model=model\n     )\n"
                },
                {
                    "date": 1674908116326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,9 @@\n             image = cv2.imread(os.path.join(test_root_name, img_name))\n \n             # compute predictions\n             predictions, mask_list = cell_demo.run_on_opencv_image(image)\n+\n             masks_no_overlap, bi_map, num_mask = removeoverlap(mask_list)\n             pred_ins = mask2out(masks_no_overlap, num_mask)\n \n             cv2.imwrite(os.path.join(out_pred_root, img_name), predictions)\n"
                },
                {
                    "date": 1674908350985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,20 +40,26 @@\n \n             # compute predictions\n             predictions, mask_list = cell_demo.run_on_opencv_image(image)\n \n-            masks_no_overlap, bi_map, num_mask = removeoverlap(mask_list)\n-            pred_ins = mask2out(masks_no_overlap, num_mask)\n+            if mask_list.shape[-1]:\n+                masks_no_overlap, bi_map, num_mask = removeoverlap(mask_list)\n+                pred_ins = mask2out(masks_no_overlap, num_mask)\n \n-            cv2.imwrite(os.path.join(out_pred_root, img_name), predictions)\n-            cv2.imwrite(os.path.join(out_pred_root, 'bi_mask_' +\n-                        img_name), (bi_map * 255).astype(np.uint8))\n+                cv2.imwrite(os.path.join(out_pred_root, img_name), predictions)\n+                cv2.imwrite(os.path.join(out_pred_root, 'bi_mask_' +\n+                            img_name), (bi_map * 255).astype(np.uint8))\n \n-            pred_ins_name = os.path.join(\n-                out_pred_root, img_name.split('.')[0] + '.tif')\n-            tiff.imsave(pred_ins_name, pred_ins)\n+                pred_ins_name = os.path.join(\n+                    out_pred_root, img_name.split('.')[0] + '.tif')\n+                tiff.imsave(pred_ins_name, pred_ins)\n \n+            else:\n+                cv2.imwrite(os.path.join(out_pred_root, img_name), predictions)\n+                cv2.imwrite(os.path.join(out_pred_root, 'bi_mask_' +\n+                            img_name), np.zeros_like(image))\n \n+\n if __name__ == \"__main__\":\n     wts_root = '/data111/bianhao/code/zhangye/PDAM/work_dir/pannuke2tnbc-models/pdam/model_epoch_010.pth'\n     out_pred_root = 'OUTPUT'\n \n"
                },
                {
                    "date": 1674908472522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,13 @@\n \n             else:\n                 cv2.imwrite(os.path.join(out_pred_root, img_name), predictions)\n                 cv2.imwrite(os.path.join(out_pred_root, 'bi_mask_' +\n-                            img_name), np.zeros_like(image))\n+                            img_name), np.zeros(image.shape[:2], dtype=np.uint8))\n+                pred_ins_name = os.path.join(\n+                    out_pred_root, img_name.split('.')[0] + '.tif')\n+                tiff.imsave(pred_ins_name, np.zeros(\n+                    image.shape[:2], dtype=np.uint16))\n \n \n if __name__ == \"__main__\":\n     wts_root = '/data111/bianhao/code/zhangye/PDAM/work_dir/pannuke2tnbc-models/pdam/model_epoch_010.pth'\n"
                }
            ],
            "date": 1674907413007,
            "name": "Commit-0",
            "content": "\nimport cv2.cv2 as cv2\nfrom maskrcnn_benchmark.utils.miscellaneous import mkdir\nimport tifffile as tiff\nfrom inference.cell_predictor import CellDemo\nfrom inference.metrics import mask2out, removeoverlap\nfrom maskrcnn_benchmark.config import cfg\nimport os\nimport numpy as np\nfrom maskrcnn_benchmark.modeling.detector import build_detection_model\n\n\n\ndef infer_fluo2tnbc(wts_root, out_pred_root):\n\n\n    config_file = \"../configs/uda_nuclei_seg/e2e_mask_rcnn_R_101_FPN_1x_gn_pannuke2tnbc.yaml\"\n\n    cfg.merge_from_file(config_file)\n\n    cfg.merge_from_list([\"MODEL.DEVICE\", \"cuda\"])\n    model = build_detection_model(cfg)\n\n    cell_demo = CellDemo(\n        cfg,\n        min_image_size=512,\n        confidence_threshold=0.5,\n        weight= wts_root,\n        model=model\n    )\n\n    test_root_name = ''  # with testing images\n\n    mkdir(out_pred_root)\n\n    test_imgs = os.listdir(test_root_name)\n    for img_name in test_imgs:\n\n        if img_name.endswith(\".png\"):\n            image = cv2.imread(os.path.join(test_root_name, img_name))\n\n            # compute predictions\n            predictions, mask_list = cell_demo.run_on_opencv_image(image)\n            masks_no_overlap, bi_map, num_mask = removeoverlap(mask_list)\n            pred_ins = mask2out(masks_no_overlap, num_mask)\n\n\n            cv2.imwrite(os.path.join(out_pred_root, img_name), predictions)\n            cv2.imwrite(os.path.join(out_pred_root, 'bi_mask_' + img_name), (bi_map*255).astype(np.uint8))\n\n            pred_ins_name = os.path.join(out_pred_root, img_name.split('.')[0] + '.tif')\n            tiff.imsave(pred_ins_name, pred_ins)\n\n\n\nif __name__ == \"__main__\":\n    wts_root = ''\n    out_pred_root = ''\n\n    infer_fluo2tnbc(wts_root, out_pred_root)"
        }
    ]
}